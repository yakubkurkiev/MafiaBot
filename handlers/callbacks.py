from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from database import Session, Player, Game
from states import GameStates
from keyboards import get_night_action_kb

router = Router()

@router.callback_query(F.data == "join_game")
async def join_game_callback(callback: types.CallbackQuery, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
    with Session() as session:
        game = session.query(Game).filter_by(chat_id=callback.message.chat.id, state="waiting").first()
        if not game:
            await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        existing_player = session.query(Player).filter_by(user_id=callback.from_user.id, game_id=game.id).first()
        if existing_player:
            await callback.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
            return
        
        player = Player(
            user_id=callback.from_user.id,
            name=callback.from_user.first_name,
            game_id=game.id
        )
        session.add(player)
        session.commit()
        
        await callback.message.answer(f"‚úÖ {callback.from_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
        await callback.answer()

@router.callback_query(F.data.startswith("mafia_select:"))
async def mafia_select_target(callback: types.CallbackQuery, state: FSMContext):
    # –ú–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É
    target_id = int(callback.data.split(":")[1])
    
    with Session() as session:
        player = session.query(Player).filter_by(user_id=callback.from_user.id).first()
        if not player or player.role != "mafia":
            await callback.answer("–í—ã –Ω–µ –º–∞—Ñ–∏—è!")
            return
        
        player.night_action_target = target_id
        session.commit()
        
        target = session.query(Player).filter_by(user_id=target_id).first()
        await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {target.name} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∂–µ—Ä—Ç–≤—ã.")
        await callback.answer()

@router.callback_query(F.data.startswith("doctor_select:"))
async def doctor_select_target(callback: types.CallbackQuery, state: FSMContext):
    # –î–æ–∫—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–≥–æ –ª–µ—á–∏—Ç—å
    target_id = int(callback.data.split(":")[1])
    
    with Session() as session:
        player = session.query(Player).filter_by(user_id=callback.from_user.id).first()
        if not player or player.role != "doctor":
            await callback.answer("–í—ã –Ω–µ –¥–æ–∫—Ç–æ—Ä!")
            return
        
        player.night_action_target = target_id
        session.commit()
        
        target = session.query(Player).filter_by(user_id=target_id).first()
        await callback.message.edit_text(f"‚úÖ –í—ã —Ä–µ—à–∏–ª–∏ –≤—ã–ª–µ—á–∏—Ç—å {target.name}.")
        await callback.answer()

@router.callback_query(F.data.startswith("detective_select:"))
async def detective_select_target(callback: types.CallbackQuery, state: FSMContext):
    # –î–µ—Ç–µ–∫—Ç–∏–≤ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–≥—Ä–æ–∫–∞
    target_id = int(callback.data.split(":")[1])
    
    with Session() as session:
        player = session.query(Player).filter_by(user_id=callback.from_user.id).first()
        if not player or player.role != "detective":
            await callback.answer("–í—ã –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏–≤!")
            return
        
        target = session.query(Player).filter_by(user_id=target_id).first()
        await callback.message.edit_text(f"üîç {target.name} - {ROLES[target.role]['name']}")
        await callback.answer()

@router.callback_query(F.data.startswith("vote:"))
async def vote_for_player(callback: types.CallbackQuery, state: FSMContext):
    # –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∏–≥—Ä–æ–∫–∞ –¥–Ω–µ–º
    target_id = int(callback.data.split(":")[1])
    
    with Session() as session:
        player = session.query(Player).filter_by(user_id=callback.from_user.id).first()
        if not player or not player.alive:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!")
            return
        
        player.vote_target = target_id
        session.commit()
        
        target = session.query(Player).filter_by(user_id=target_id).first()
        await callback.answer(f"‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {target.name}") 
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database import Session, Game, Player
from states import GameStates
from keyboards import get_join_keyboard
from config import MIN_PLAYERS, MAX_PLAYERS

router = Router()

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞—Ñ–∏—è!\n"
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã.",
        reply_markup=get_join_keyboard()
    )

@router.message(Command("newgame"))
async def new_game(message: types.Message, state: FSMContext):
    if message.chat.type != "group" and message.chat.type != "supergroup":
        await message.answer("–ò–≥—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!")
        return
    
    with Session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        existing_game = session.query(Game).filter_by(chat_id=message.chat.id, state="waiting").first()
        if existing_game:
            await message.answer("–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        game = Game(chat_id=message.chat.id, state="waiting")
        session.add(game)
        session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –∏–≥—Ä—É
        player = Player(
            user_id=message.from_user.id,
            name=message.from_user.first_name,
            game_id=game.id
        )
        session.add(player)
        session.commit()
        
        await message.answer(
            f"üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.",
            reply_markup=get_join_keyboard()
        )
        await state.set_state(GameStates.WAITING)

@router.message(Command("join"))
async def join_game(message: types.Message, state: FSMContext):
    with Session() as session:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        game = session.query(Game).filter_by(chat_id=message.chat.id, state="waiting").first()
        if not game:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /newgame")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        existing_player = session.query(Player).filter_by(user_id=message.from_user.id, game_id=game.id).first()
        if existing_player:
            await message.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        player_count = session.query(Player).filter_by(game_id=game.id).count()
        if player_count >= MAX_PLAYERS:
            await message.answer(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ ({MAX_PLAYERS})")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        player = Player(
            user_id=message.from_user.id,
            name=message.from_user.first_name,
            game_id=game.id
        )
        session.add(player)
        session.commit()
        
        await message.answer(f"‚úÖ {message.from_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É
        if player_count + 1 >= MIN_PLAYERS:
            await message.answer(f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startgame –¥–ª—è –Ω–∞—á–∞–ª–∞.")
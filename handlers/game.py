import asyncio
from aiogram import Router, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database import Session, Game, Player
from states import GameStates
from keyboards import get_night_action_kb, get_voting_kb
from constants import ROLES, PHASES
from config import DISCUSSION_TIME, VOTING_TIME, NIGHT_TIME

router = Router()

@router.message(Command("startgame"))
async def start_game(message: types.Message, state: FSMContext, bot: Bot):
    with Session() as session:
        game = session.query(Game).filter_by(chat_id=message.chat.id, state="waiting").first()
        if not game:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return
        
        players = session.query(Player).filter_by(game_id=game.id).all()
        if len(players) < MIN_PLAYERS:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_PLAYERS}.")
            return
        
        # –†–∞–∑–¥–∞–µ–º —Ä–æ–ª–∏
        assign_roles(game.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        game.state = "night"
        session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
        await send_roles_to_players(bot, game.id)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É
        await start_night_phase(bot, game.id)
        await state.set_state(GameStates.NIGHT)

async def assign_roles(game_id):
    with Session() as session:
        players = session.query(Player).filter_by(game_id=game_id).all()
        player_count = len(players)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π
        mafia_count = 1
        detective_count = 1
        doctor_count = 1
        civilian_count = player_count - mafia_count - detective_count - doctor_count
        
        roles = []
        roles.extend(["mafia"] * mafia_count)
        roles.extend(["detective"] * detective_count)
        roles.extend(["doctor"] * doctor_count)
        roles.extend(["civilian"] * civilian_count)
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–æ–ª–∏
        import random
        random.shuffle(roles)
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
        for i, player in enumerate(players):
            player.role = roles[i]
        
        session.commit()

async def send_roles_to_players(bot: Bot, game_id):
    with Session() as session:
        players = session.query(Player).filter_by(game_id=game_id).all()
        
        for player in players:
            role_info = ROLES[player.role]
            await bot.send_message(
                player.user_id,
                f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['name']} {role_info['emoji']}\n\n"
                f"{role_info['description']}\n\n"
                "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã!"
            )

async def start_night_phase(bot: Bot, game_id):
    with Session() as session:
        game = session.query(Game).filter_by(id=game_id).first()
        game.current_phase = "night"
        session.commit()
        
        await bot.send_message(
            game.chat_id,
            f"{PHASES['night']}! –í—Å–µ –∑–∞—Å—ã–ø–∞—é—Ç...\n"
            "–ü—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏."
        )
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –Ω–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await asyncio.sleep(NIGHT_TIME)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
        await start_discussion_phase(bot, game_id)

async def start_discussion_phase(bot: Bot, game_id):
    with Session() as session:
        game = session.query(Game).filter_by(id=game_id).first()
        game.state = "discussion"
        game.current_phase = "discussion"
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–æ —É–±–∏–ª–∏
        mafia_action = session.query(Player).filter_by(game_id=game_id, role="mafia", alive=True).first()
        doctor_action = session.query(Player).filter_by(game_id=game_id, role="doctor", alive=True).first()
        
        victim = None
        if mafia_action and mafia_action.night_action_target:
            if not doctor_action or doctor_action.night_action_target != mafia_action.night_action_target:
                victim = session.query(Player).filter_by(user_id=mafia_action.night_action_target).first()
                victim.alive = False
                session.commit()
        
        if victim:
            await bot.send_message(
                game.chat_id,
                f"‚ò†Ô∏è –ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç {victim.name} ({ROLES[victim.role]['name']})!"
            )
        else:
            await bot.send_message(game.chat_id, "üåÉ –≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±!")
        
        await bot.send_message(
            game.chat_id,
            f"üí¨ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ! –£ –≤–∞—Å {DISCUSSION_TIME} —Å–µ–∫—É–Ω–¥."
        )
        
        # –¢–∞–π–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        await asyncio.sleep(DISCUSSION_TIME)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
        await start_voting_phase(bot, game_id)

async def start_voting_phase(bot: Bot, game_id):
    with Session() as session:
        game = session.query(Game).filter_by(id=game_id).first()
        game.state = "day"
        game.current_phase = "day"
        session.commit()
        
        await bot.send_message(
            game.chat_id,
            f"{PHASES['day']}! –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.",
            reply_markup=get_voting_kb(game_id)
        )
        
        # –¢–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(VOTING_TIME)
        
        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        await count_votes(bot, game_id)

async def count_votes(bot: Bot, game_id):
    with Session() as session:
        game = session.query(Game).filter_by(id=game_id).first()
        players = session.query(Player).filter_by(game_id=game_id, alive=True).all()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        votes = {}
        for player in players:
            if player.vote_target:
                votes[player.vote_target] = votes.get(player.vote_target, 0) + 1
        
        if votes:
            executed_id = max(votes.items(), key=lambda x: x[1])[0]
            executed = session.query(Player).filter_by(user_id=executed_id).first()
            executed.alive = False
            session.commit()
            
            await bot.send_message(
                game.chat_id,
                f"‚öñÔ∏è –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∫–∞–∑–Ω–µ–Ω {executed.name} ({ROLES[executed.role]['name']})!"
            )
        else:
            await bot.send_message(game.chat_id, "–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∫–∞–∑–Ω–µ–Ω - –≥–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
        await check_win_condition(bot, game_id)

async def check_win_condition(bot: Bot, game_id):
    with Session() as session:
        game = session.query(Game).filter_by(id=game_id).first()
        players = session.query(Player).filter_by(game_id=game_id).all()
        
        mafia_alive = sum(1 for p in players if p.role == "mafia" and p.alive)
        civilians_alive = sum(1 for p in players if p.role != "mafia" and p.alive)
        
        if mafia_alive == 0:
            await bot.send_message(
                game.chat_id,
                "üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏! –ú–∞—Ñ–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞."
            )
            game.state = "ended"
            session.commit()
        elif mafia_alive >= civilians_alive:
            await bot.send_message(
                game.chat_id,
                "üé≠ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
            )
            game.state = "ended"
            session.commit()
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É - —Å–ª–µ–¥—É—é—â–∞—è –Ω–æ—á—å
            await start_night_phase(bot, game_id)
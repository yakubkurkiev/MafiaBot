from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from random import sample
from typing import Optional

from database.service import (
    get_game_by_chat_id, create_game, add_player,
    get_players_in_game, update_player_role
)
from states import GameState
from keyboards import get_game_menu, get_vote_keyboard
from config import ROLES

router = Router()

@router.message(F.text == "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    chat_id = message.chat.id
    game = get_game_by_chat_id(chat_id)
    
    if game and game.is_active:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
        return
    
    if not game:
        game = create_game(chat_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞—á–∞–ª –∏–≥—Ä—É)
    await add_player_to_game(message.from_user.id, message.from_user.username, game.id)
    
    await message.answer(
        "–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤...\n"
        "–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /join",
        reply_markup=get_game_menu()
    )
    await state.set_state(GameState.waiting_for_players)

async def add_player_to_game(user_id: int, username: str, game_id: int) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É"""
    players = get_players_in_game(game_id)
    if any(p.user_id == user_id for p in players):
        return
    
    add_player(game_id, user_id, username)

@router.message(Command("join"))
async def join_game(message: types.Message, state: FSMContext):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ"""
    current_state = await state.get_state()
    if current_state != GameState.waiting_for_players:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.")
        return
    
    game = get_game_by_chat_id(message.chat.id)
    if not game:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É.")
        return
    
    await add_player_to_game(message.from_user.id, message.from_user.username, game.id)
    players = get_players_in_game(game.id)
    await message.answer(f"–ò–≥—Ä–æ–∫ {message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(players)}")

@router.message(F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É")
async def end_game(message: types.Message, state: FSMContext):
    """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    await state.clear()
    await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_menu())

@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤")
async def show_players(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤"""
    game = get_game_by_chat_id(message.chat.id)
    if not game:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    players = get_players_in_game(game.id)
    if not players:
        await message.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ.")
        return
    
    players_list = "\n".join([f"üë§ {p.username}" for p in players])
    await message.answer(f"–ò–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä–µ:\n{players_list}")

@router.message(F.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game_session(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤"""
    game = get_game_by_chat_id(message.chat.id)
    if not game:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    players = get_players_in_game(game.id)
    if len(players) < sum(ROLES.values()):
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {sum(ROLES.values())}.")
        return
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏
    assign_roles(game.id, players)
    
    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å...")
    await state.set_state(GameState.night)
    await night_actions(message, players)

def assign_roles(game_id: int, players: list) -> None:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏"""
    roles = []
    for role, count in ROLES.items():
        roles.extend([role] * count)
    
    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —Ä–æ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π
    while len(players) > len(roles):
        roles.append("civilian")
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–æ–ª–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏–≥—Ä–æ–∫–∞–º
    shuffled_roles = sample(roles, len(roles))
    for player, role in zip(players, shuffled_roles):
        update_player_role(player.id, role)

async def night_actions(message: types.Message, players: list) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–º–∞—Ñ–∏—è —É–±–∏–≤–∞–µ—Ç, –¥–æ–∫—Ç–æ—Ä –ª–µ—á–∏—Ç)
    # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–Ω—é
    await message.answer("–ù–æ—á—å –ø—Ä–æ—à–ª–∞. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å!")
    alive_players = [p for p in players if p.is_alive]
    await message.answer(
        "–û–±—Å—É–¥–∏—Ç–µ –∫—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Ñ–∏–µ–π –∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ!",
        reply_markup=get_vote_keyboard(alive_players)
    )